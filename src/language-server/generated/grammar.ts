/******************************************************************************
 * This file was generated by langium-cli 0.5.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

import { loadGrammarFromJson, Grammar } from 'langium';

let loadedMediatorGrammar: Grammar | undefined;
export const MediatorGrammar = (): Grammar => loadedMediatorGrammar ?? (loadedMediatorGrammar = loadGrammarFromJson(`{
  "$type": "Grammar",
  "isDeclared": true,
  "name": "Mediator",
  "rules": [
    {
      "$type": "ParserRule",
      "name": "Program",
      "entry": true,
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "Assignment",
            "feature": "typedefs",
            "operator": "+=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$refText": "TypeDef"
              },
              "arguments": []
            }
          },
          {
            "$type": "Assignment",
            "feature": "constdefs",
            "operator": "+=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$refText": "ConstDef"
              },
              "arguments": []
            }
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Assignment",
                "feature": "vars",
                "operator": "+=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "VariableTyping"
                  },
                  "arguments": []
                }
              },
              {
                "$type": "Keyword",
                "value": ";"
              }
            ]
          }
        ],
        "cardinality": "*"
      },
      "definesHiddenTokens": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "TypeDef",
      "inferredType": {
        "$type": "InferredType",
        "name": "TypeDef"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Keyword",
            "value": "typedef"
          },
          {
            "$type": "Assignment",
            "feature": "type",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$refText": "Type"
              },
              "arguments": []
            }
          },
          {
            "$type": "Keyword",
            "value": "as"
          },
          {
            "$type": "Assignment",
            "feature": "name",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$refText": "ID"
              },
              "arguments": []
            }
          },
          {
            "$type": "Keyword",
            "value": ";"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "ConstDef",
      "inferredType": {
        "$type": "InferredType",
        "name": "ConstDef"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Keyword",
            "value": "const"
          },
          {
            "$type": "Assignment",
            "feature": "expr",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$refText": "Expression"
              },
              "arguments": []
            }
          },
          {
            "$type": "Keyword",
            "value": "as"
          },
          {
            "$type": "Assignment",
            "feature": "name",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$refText": "ID"
              },
              "arguments": []
            }
          },
          {
            "$type": "Keyword",
            "value": ";"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "VariableTyping",
      "returnType": {
        "$refText": "VariableTyping"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Assignment",
            "feature": "name",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$refText": "ID"
              },
              "arguments": []
            }
          },
          {
            "$type": "Keyword",
            "value": ":"
          },
          {
            "$type": "Assignment",
            "feature": "typing",
            "operator": "=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$refText": "Type"
              },
              "arguments": []
            }
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "Expression",
      "returnType": {
        "$refText": "Expression"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$refText": "LogicalOrExpression"
            },
            "arguments": []
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "type": {
                  "$refText": "ConditionalExpression"
                }
              },
              {
                "$type": "Keyword",
                "value": "?"
              },
              {
                "$type": "RuleCall",
                "rule": {
                  "$refText": "Expression"
                },
                "arguments": []
              },
              {
                "$type": "Keyword",
                "value": ":"
              },
              {
                "$type": "RuleCall",
                "rule": {
                  "$refText": "Expression"
                },
                "arguments": []
              }
            ],
            "cardinality": "?"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "LogicalOrExpression",
      "returnType": {
        "$refText": "Expression"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$refText": "LogicalAndExpression"
            },
            "arguments": []
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "type": {
                  "$refText": "BinaryExpression"
                },
                "feature": "left",
                "operator": "="
              },
              {
                "$type": "Assignment",
                "feature": "operator",
                "operator": "=",
                "terminal": {
                  "$type": "Keyword",
                  "value": "||"
                }
              },
              {
                "$type": "Assignment",
                "feature": "right",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "LogicalAndExpression"
                  },
                  "arguments": []
                }
              }
            ],
            "cardinality": "*"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "LogicalAndExpression",
      "returnType": {
        "$refText": "Expression"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$refText": "LogicalNotExpression"
            },
            "arguments": []
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "type": {
                  "$refText": "BinaryExpression"
                },
                "feature": "left",
                "operator": "="
              },
              {
                "$type": "Assignment",
                "feature": "operator",
                "operator": "=",
                "terminal": {
                  "$type": "Keyword",
                  "value": "&&"
                }
              },
              {
                "$type": "Assignment",
                "feature": "right",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "LogicalNotExpression"
                  },
                  "arguments": []
                }
              }
            ],
            "cardinality": "*"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "LogicalNotExpression",
      "returnType": {
        "$refText": "Expression"
      },
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "type": {
                  "$refText": "PrefixExpression"
                }
              },
              {
                "$type": "Assignment",
                "feature": "operator",
                "operator": "=",
                "terminal": {
                  "$type": "Keyword",
                  "value": "!"
                }
              },
              {
                "$type": "Assignment",
                "feature": "operand",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "LogicalNotExpression"
                  },
                  "arguments": []
                }
              }
            ]
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$refText": "ComparisonExpression"
            },
            "arguments": []
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "ComparisonExpression",
      "returnType": {
        "$refText": "Expression"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$refText": "EqualityExpression"
            },
            "arguments": []
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "type": {
                  "$refText": "BinaryExpression"
                },
                "feature": "left",
                "operator": "="
              },
              {
                "$type": "Assignment",
                "feature": "operator",
                "operator": "=",
                "terminal": {
                  "$type": "Alternatives",
                  "elements": [
                    {
                      "$type": "Keyword",
                      "value": "<"
                    },
                    {
                      "$type": "Keyword",
                      "value": ">"
                    },
                    {
                      "$type": "Keyword",
                      "value": "<="
                    },
                    {
                      "$type": "Keyword",
                      "value": ">="
                    }
                  ]
                }
              },
              {
                "$type": "Assignment",
                "feature": "right",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "EqualityExpression"
                  },
                  "arguments": []
                }
              }
            ],
            "cardinality": "*"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "EqualityExpression",
      "returnType": {
        "$refText": "Expression"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$refText": "AdditiveExpression"
            },
            "arguments": []
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "type": {
                  "$refText": "BinaryExpression"
                },
                "feature": "left",
                "operator": "="
              },
              {
                "$type": "Assignment",
                "feature": "operator",
                "operator": "=",
                "terminal": {
                  "$type": "Alternatives",
                  "elements": [
                    {
                      "$type": "Keyword",
                      "value": "=="
                    },
                    {
                      "$type": "Keyword",
                      "value": "!="
                    }
                  ]
                }
              },
              {
                "$type": "Assignment",
                "feature": "right",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "AdditiveExpression"
                  },
                  "arguments": []
                }
              }
            ],
            "cardinality": "*"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "AdditiveExpression",
      "returnType": {
        "$refText": "Expression"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$refText": "MultiplicativeExpression"
            },
            "arguments": []
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "type": {
                  "$refText": "BinaryExpression"
                },
                "feature": "left",
                "operator": "="
              },
              {
                "$type": "Assignment",
                "feature": "operator",
                "operator": "=",
                "terminal": {
                  "$type": "Alternatives",
                  "elements": [
                    {
                      "$type": "Keyword",
                      "value": "+"
                    },
                    {
                      "$type": "Keyword",
                      "value": "-"
                    }
                  ]
                }
              },
              {
                "$type": "Assignment",
                "feature": "right",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "MultiplicativeExpression"
                  },
                  "arguments": []
                }
              }
            ],
            "cardinality": "*"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "MultiplicativeExpression",
      "returnType": {
        "$refText": "Expression"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$refText": "PrefixExpression"
            },
            "arguments": []
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "type": {
                  "$refText": "BinaryExpression"
                },
                "feature": "left",
                "operator": "="
              },
              {
                "$type": "Assignment",
                "feature": "oeprator",
                "operator": "=",
                "terminal": {
                  "$type": "Alternatives",
                  "elements": [
                    {
                      "$type": "Keyword",
                      "value": "*"
                    },
                    {
                      "$type": "Keyword",
                      "value": "/"
                    },
                    {
                      "$type": "Keyword",
                      "value": "%"
                    }
                  ]
                }
              },
              {
                "$type": "Assignment",
                "feature": "right",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "PrefixExpression"
                  },
                  "arguments": []
                }
              }
            ],
            "cardinality": "*"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "PrefixExpression",
      "returnType": {
        "$refText": "Expression"
      },
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "type": {
                  "$refText": "PrefixExpression"
                }
              },
              {
                "$type": "Assignment",
                "feature": "operator",
                "operator": "=",
                "terminal": {
                  "$type": "Alternatives",
                  "elements": [
                    {
                      "$type": "Keyword",
                      "value": "+"
                    },
                    {
                      "$type": "Keyword",
                      "value": "-"
                    }
                  ]
                }
              },
              {
                "$type": "Assignment",
                "feature": "operand",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "PrefixExpression"
                  },
                  "arguments": []
                }
              }
            ]
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$refText": "ExponentExpression"
            },
            "arguments": []
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "ExponentExpression",
      "returnType": {
        "$refText": "Expression"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$refText": "PostfixExpression"
            },
            "arguments": []
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "type": {
                  "$refText": "BinaryExpression"
                },
                "feature": "left",
                "operator": "="
              },
              {
                "$type": "Assignment",
                "feature": "operator",
                "operator": "=",
                "terminal": {
                  "$type": "Keyword",
                  "value": "**"
                }
              },
              {
                "$type": "Assignment",
                "feature": "right",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "PostfixExpression"
                  },
                  "arguments": []
                }
              }
            ],
            "cardinality": "*"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "PostfixExpression",
      "returnType": {
        "$refText": "Expression"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$refText": "PrimaryExpression"
            },
            "arguments": []
          },
          {
            "$type": "Alternatives",
            "elements": [
              {
                "$type": "Group",
                "elements": [
                  {
                    "$type": "Action",
                    "type": {
                      "$refText": "IndexingExpression"
                    },
                    "feature": "base",
                    "operator": "="
                  },
                  {
                    "$type": "Keyword",
                    "value": "["
                  },
                  {
                    "$type": "Assignment",
                    "feature": "index",
                    "operator": "=",
                    "terminal": {
                      "$type": "RuleCall",
                      "rule": {
                        "$refText": "Expression"
                      },
                      "arguments": []
                    }
                  },
                  {
                    "$type": "Keyword",
                    "value": "]"
                  }
                ]
              },
              {
                "$type": "Group",
                "elements": [
                  {
                    "$type": "Action",
                    "type": {
                      "$refText": "AttributeExpression"
                    },
                    "feature": "previous",
                    "operator": "="
                  },
                  {
                    "$type": "Keyword",
                    "value": "."
                  },
                  {
                    "$type": "Assignment",
                    "feature": "field",
                    "operator": "=",
                    "terminal": {
                      "$type": "CrossReference",
                      "type": {
                        "$refText": "NamedElement"
                      },
                      "terminal": {
                        "$type": "RuleCall",
                        "rule": {
                          "$refText": "ID"
                        },
                        "arguments": []
                      },
                      "deprecatedSyntax": false
                    }
                  }
                ]
              },
              {
                "$type": "Group",
                "elements": [
                  {
                    "$type": "Action",
                    "type": {
                      "$refText": "FunctionCallExpression"
                    }
                  },
                  {
                    "$type": "Keyword",
                    "value": "("
                  },
                  {
                    "$type": "RuleCall",
                    "rule": {
                      "$refText": "ArgumentSequence"
                    },
                    "arguments": [],
                    "cardinality": "?"
                  },
                  {
                    "$type": "Keyword",
                    "value": ")"
                  }
                ]
              }
            ],
            "cardinality": "*"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "PrimaryExpression",
      "returnType": {
        "$refText": "Expression"
      },
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "RuleCall",
            "rule": {
              "$refText": "Literal"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$refText": "FunctionCallExpression"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$refText": "StructExpression"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$refText": "ListExpression"
            },
            "arguments": []
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$refText": "BracketExpression"
            },
            "arguments": []
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "FunctionCallExpression",
      "returnType": {
        "$refText": "FunctionCallExpression"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "type": {
                  "$refText": "NamedExpression"
                }
              },
              {
                "$type": "Assignment",
                "feature": "element",
                "operator": "=",
                "terminal": {
                  "$type": "CrossReference",
                  "type": {
                    "$refText": "NamedElement"
                  },
                  "terminal": {
                    "$type": "RuleCall",
                    "rule": {
                      "$refText": "ID"
                    },
                    "arguments": []
                  },
                  "deprecatedSyntax": false
                }
              }
            ]
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "type": {
                  "$refText": "FunctionCallExpression"
                },
                "feature": "name",
                "operator": "="
              },
              {
                "$type": "Keyword",
                "value": "("
              },
              {
                "$type": "RuleCall",
                "rule": {
                  "$refText": "ArgumentSequence"
                },
                "arguments": [],
                "cardinality": "?"
              },
              {
                "$type": "Keyword",
                "value": ")"
              }
            ],
            "cardinality": "?"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "ArgumentSequence",
      "fragment": true,
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Assignment",
            "feature": "arguments",
            "operator": "+=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$refText": "Expression"
              },
              "arguments": []
            }
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Keyword",
                "value": ","
              },
              {
                "$type": "Assignment",
                "feature": "arguments",
                "operator": "+=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "Expression"
                  },
                  "arguments": []
                }
              }
            ],
            "cardinality": "*"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "StructExpression",
      "returnType": {
        "$refText": "StructExpression"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Keyword",
            "value": "struct"
          },
          {
            "$type": "Keyword",
            "value": "{"
          },
          {
            "$type": "Assignment",
            "feature": "fields",
            "operator": "+=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$refText": "ID"
              },
              "arguments": []
            }
          },
          {
            "$type": "Keyword",
            "value": "="
          },
          {
            "$type": "Assignment",
            "feature": "values",
            "operator": "+=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$refText": "Expression"
              },
              "arguments": []
            }
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Keyword",
                "value": ","
              },
              {
                "$type": "Assignment",
                "feature": "fields",
                "operator": "+=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "ID"
                  },
                  "arguments": []
                }
              },
              {
                "$type": "Keyword",
                "value": "="
              },
              {
                "$type": "Assignment",
                "feature": "values",
                "operator": "+=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "Expression"
                  },
                  "arguments": []
                }
              }
            ],
            "cardinality": "*"
          },
          {
            "$type": "Keyword",
            "value": "}"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "ListExpression",
      "returnType": {
        "$refText": "ListExpression"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Keyword",
            "value": "["
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Assignment",
                "feature": "values",
                "operator": "+=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "Expression"
                  },
                  "arguments": []
                }
              },
              {
                "$type": "Group",
                "elements": [
                  {
                    "$type": "Keyword",
                    "value": ","
                  },
                  {
                    "$type": "Assignment",
                    "feature": "values",
                    "operator": "+=",
                    "terminal": {
                      "$type": "RuleCall",
                      "rule": {
                        "$refText": "Expression"
                      },
                      "arguments": []
                    }
                  }
                ],
                "cardinality": "*"
              },
              {
                "$type": "Keyword",
                "value": ",",
                "cardinality": "?"
              }
            ],
            "cardinality": "?"
          },
          {
            "$type": "Keyword",
            "value": "]"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "BracketExpression",
      "returnType": {
        "$refText": "Expression"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Keyword",
            "value": "("
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$refText": "Expression"
            },
            "arguments": []
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "type": {
                  "$refText": "TupleExpression"
                },
                "feature": "values",
                "operator": "+="
              },
              {
                "$type": "Keyword",
                "value": ","
              },
              {
                "$type": "Assignment",
                "feature": "values",
                "operator": "+=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "Expression"
                  },
                  "arguments": []
                }
              }
            ],
            "cardinality": "*"
          },
          {
            "$type": "Keyword",
            "value": ",",
            "cardinality": "?"
          },
          {
            "$type": "Keyword",
            "value": ")"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "Literal",
      "returnType": {
        "$refText": "Literal"
      },
      "definition": {
        "$type": "Alternatives",
        "elements": [
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "type": {
                  "$refText": "IntLiteral"
                }
              },
              {
                "$type": "Assignment",
                "feature": "value",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "INT"
                  },
                  "arguments": []
                }
              }
            ]
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "type": {
                  "$refText": "RealLiteral"
                }
              },
              {
                "$type": "Assignment",
                "feature": "value",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "REAL"
                  },
                  "arguments": []
                }
              }
            ]
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "type": {
                  "$refText": "CharLiteral"
                }
              },
              {
                "$type": "Assignment",
                "feature": "value",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "CHAR"
                  },
                  "arguments": []
                }
              }
            ]
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "type": {
                  "$refText": "BoolLiteral"
                }
              },
              {
                "$type": "Assignment",
                "feature": "value",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "BOOL"
                  },
                  "arguments": []
                }
              }
            ]
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "type": {
                  "$refText": "NullLiteral"
                }
              },
              {
                "$type": "Assignment",
                "feature": "value",
                "operator": "=",
                "terminal": {
                  "$type": "Keyword",
                  "value": "null"
                }
              }
            ]
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "Type",
      "returnType": {
        "$refText": "Type"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Alternatives",
            "elements": [
              {
                "$type": "RuleCall",
                "rule": {
                  "$refText": "PrimitiveType"
                },
                "arguments": []
              },
              {
                "$type": "RuleCall",
                "rule": {
                  "$refText": "EnumType"
                },
                "arguments": []
              },
              {
                "$type": "RuleCall",
                "rule": {
                  "$refText": "StructType"
                },
                "arguments": []
              },
              {
                "$type": "RuleCall",
                "rule": {
                  "$refText": "NamedType"
                },
                "arguments": []
              },
              {
                "$type": "RuleCall",
                "rule": {
                  "$refText": "BracketType"
                },
                "arguments": []
              }
            ]
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "type": {
                  "$refText": "ListType"
                },
                "feature": "base",
                "operator": "="
              },
              {
                "$type": "Keyword",
                "value": "["
              },
              {
                "$type": "Assignment",
                "feature": "capacity",
                "operator": "=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "Expression"
                  },
                  "arguments": []
                },
                "cardinality": "?"
              },
              {
                "$type": "Keyword",
                "value": "]"
              }
            ],
            "cardinality": "*"
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "type": {
                  "$refText": "UnionType"
                },
                "feature": "types",
                "operator": "+="
              },
              {
                "$type": "Keyword",
                "value": "|"
              },
              {
                "$type": "Assignment",
                "feature": "types",
                "operator": "+=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "Type"
                  },
                  "arguments": []
                }
              }
            ],
            "cardinality": "*"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "PrimitiveType",
      "returnType": {
        "$refText": "PrimitiveType"
      },
      "definition": {
        "$type": "Assignment",
        "feature": "name",
        "operator": "=",
        "terminal": {
          "$type": "Alternatives",
          "elements": [
            {
              "$type": "Keyword",
              "value": "int"
            },
            {
              "$type": "Keyword",
              "value": "real"
            },
            {
              "$type": "Keyword",
              "value": "char"
            },
            {
              "$type": "Keyword",
              "value": "bool"
            },
            {
              "$type": "Keyword",
              "value": "null"
            }
          ]
        }
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "EnumType",
      "returnType": {
        "$refText": "EnumType"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Keyword",
            "value": "enum"
          },
          {
            "$type": "Keyword",
            "value": "{"
          },
          {
            "$type": "Assignment",
            "feature": "members",
            "operator": "+=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$refText": "EnumMember"
              },
              "arguments": []
            }
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Keyword",
                "value": ","
              },
              {
                "$type": "Assignment",
                "feature": "members",
                "operator": "+=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "EnumMember"
                  },
                  "arguments": []
                }
              }
            ],
            "cardinality": "*"
          },
          {
            "$type": "Keyword",
            "value": "}"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "EnumMember",
      "returnType": {
        "$refText": "EnumMember"
      },
      "definition": {
        "$type": "Assignment",
        "feature": "name",
        "operator": "=",
        "terminal": {
          "$type": "RuleCall",
          "rule": {
            "$refText": "ID"
          },
          "arguments": []
        }
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "StructType",
      "returnType": {
        "$refText": "StructType"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Keyword",
            "value": "struct"
          },
          {
            "$type": "Keyword",
            "value": "{"
          },
          {
            "$type": "Assignment",
            "feature": "fields",
            "operator": "+=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$refText": "Field"
              },
              "arguments": []
            }
          },
          {
            "$type": "Keyword",
            "value": ":"
          },
          {
            "$type": "Assignment",
            "feature": "types",
            "operator": "+=",
            "terminal": {
              "$type": "RuleCall",
              "rule": {
                "$refText": "Type"
              },
              "arguments": []
            }
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Keyword",
                "value": ","
              },
              {
                "$type": "Assignment",
                "feature": "fields",
                "operator": "+=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "Field"
                  },
                  "arguments": []
                }
              },
              {
                "$type": "Keyword",
                "value": ":"
              },
              {
                "$type": "Assignment",
                "feature": "types",
                "operator": "+=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "Type"
                  },
                  "arguments": []
                }
              }
            ],
            "cardinality": "*"
          },
          {
            "$type": "Keyword",
            "value": "}"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "Field",
      "returnType": {
        "$refText": "Field"
      },
      "definition": {
        "$type": "Assignment",
        "feature": "name",
        "operator": "=",
        "terminal": {
          "$type": "RuleCall",
          "rule": {
            "$refText": "ID"
          },
          "arguments": []
        }
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "NamedType",
      "returnType": {
        "$refText": "NamedType"
      },
      "definition": {
        "$type": "Assignment",
        "feature": "alias",
        "operator": "=",
        "terminal": {
          "$type": "CrossReference",
          "type": {
            "$refText": "TypeDef"
          },
          "terminal": {
            "$type": "RuleCall",
            "rule": {
              "$refText": "ID"
            },
            "arguments": []
          },
          "deprecatedSyntax": false
        }
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "ParserRule",
      "name": "BracketType",
      "returnType": {
        "$refText": "Type"
      },
      "definition": {
        "$type": "Group",
        "elements": [
          {
            "$type": "Keyword",
            "value": "("
          },
          {
            "$type": "RuleCall",
            "rule": {
              "$refText": "Type"
            },
            "arguments": []
          },
          {
            "$type": "Group",
            "elements": [
              {
                "$type": "Action",
                "type": {
                  "$refText": "TupleType"
                },
                "feature": "types",
                "operator": "+="
              },
              {
                "$type": "Keyword",
                "value": ","
              },
              {
                "$type": "Assignment",
                "feature": "types",
                "operator": "+=",
                "terminal": {
                  "$type": "RuleCall",
                  "rule": {
                    "$refText": "Type"
                  },
                  "arguments": []
                }
              }
            ],
            "cardinality": "*"
          },
          {
            "$type": "Keyword",
            "value": ")"
          }
        ]
      },
      "definesHiddenTokens": false,
      "entry": false,
      "fragment": false,
      "hiddenTokens": [],
      "parameters": [],
      "wildcard": false
    },
    {
      "$type": "TerminalRule",
      "name": "REAL",
      "type": {
        "$type": "ReturnType",
        "name": "number"
      },
      "definition": {
        "$type": "TerminalAlternatives",
        "elements": [
          {
            "$type": "TerminalGroup",
            "elements": [
              {
                "$type": "TerminalRuleCall",
                "rule": {
                  "$refText": "DECFRAC"
                }
              },
              {
                "$type": "TerminalRuleCall",
                "rule": {
                  "$refText": "EXPONENT"
                },
                "cardinality": "?"
              }
            ]
          },
          {
            "$type": "TerminalGroup",
            "elements": [
              {
                "$type": "TerminalRuleCall",
                "rule": {
                  "$refText": "DECSEQ"
                }
              },
              {
                "$type": "TerminalRuleCall",
                "rule": {
                  "$refText": "EXPONENT"
                }
              }
            ]
          }
        ]
      },
      "fragment": false,
      "hidden": false
    },
    {
      "$type": "TerminalRule",
      "name": "INT",
      "type": {
        "$type": "ReturnType",
        "name": "number"
      },
      "definition": {
        "$type": "TerminalAlternatives",
        "elements": [
          {
            "$type": "TerminalAlternatives",
            "elements": [
              {
                "$type": "TerminalAlternatives",
                "elements": [
                  {
                    "$type": "TerminalRuleCall",
                    "rule": {
                      "$refText": "BINSEQ"
                    }
                  },
                  {
                    "$type": "TerminalRuleCall",
                    "rule": {
                      "$refText": "OCTSEQ"
                    }
                  }
                ]
              },
              {
                "$type": "TerminalRuleCall",
                "rule": {
                  "$refText": "HEXSEQ"
                }
              }
            ]
          },
          {
            "$type": "TerminalRuleCall",
            "rule": {
              "$refText": "DECSEQ"
            }
          }
        ]
      },
      "fragment": false,
      "hidden": false
    },
    {
      "$type": "TerminalRule",
      "fragment": true,
      "name": "BINSEQ",
      "definition": {
        "$type": "RegexToken",
        "regex": "0[bB][01]+"
      },
      "hidden": false
    },
    {
      "$type": "TerminalRule",
      "fragment": true,
      "name": "OCTSEQ",
      "definition": {
        "$type": "RegexToken",
        "regex": "0[oO][0-7]+"
      },
      "hidden": false
    },
    {
      "$type": "TerminalRule",
      "fragment": true,
      "name": "HEXSEQ",
      "definition": {
        "$type": "RegexToken",
        "regex": "0[xX][\\\\da-fA-F]+"
      },
      "hidden": false
    },
    {
      "$type": "TerminalRule",
      "fragment": true,
      "name": "DECFRAC",
      "definition": {
        "$type": "RegexToken",
        "regex": "(([1-9]\\\\d*|0)?\\\\.\\\\d+)"
      },
      "hidden": false
    },
    {
      "$type": "TerminalRule",
      "fragment": true,
      "name": "DECSEQ",
      "definition": {
        "$type": "RegexToken",
        "regex": "[1-9]\\\\d*|0"
      },
      "hidden": false
    },
    {
      "$type": "TerminalRule",
      "fragment": true,
      "name": "EXPONENT",
      "definition": {
        "$type": "RegexToken",
        "regex": "[eE][+-]?\\\\d+"
      },
      "hidden": false
    },
    {
      "$type": "TerminalRule",
      "name": "CHAR",
      "type": {
        "$type": "ReturnType",
        "name": "string"
      },
      "definition": {
        "$type": "RegexToken",
        "regex": "'[^'\\\\\\\\\\\\s]'|'\\\\\\\\[abtnvfr0e\\\\\\\\']'|' '"
      },
      "fragment": false,
      "hidden": false
    },
    {
      "$type": "TerminalRule",
      "name": "BOOL",
      "type": {
        "$type": "ReturnType",
        "name": "boolean"
      },
      "definition": {
        "$type": "TerminalAlternatives",
        "elements": [
          {
            "$type": "CharacterRange",
            "left": {
              "$type": "Keyword",
              "value": "true"
            }
          },
          {
            "$type": "CharacterRange",
            "left": {
              "$type": "Keyword",
              "value": "false"
            }
          }
        ]
      },
      "fragment": false,
      "hidden": false
    },
    {
      "$type": "TerminalRule",
      "name": "ID",
      "type": {
        "$type": "ReturnType",
        "name": "string"
      },
      "definition": {
        "$type": "RegexToken",
        "regex": "[a-zA-Z_]\\\\w*"
      },
      "fragment": false,
      "hidden": false
    },
    {
      "$type": "TerminalRule",
      "hidden": true,
      "name": "WS",
      "definition": {
        "$type": "RegexToken",
        "regex": "\\\\s+"
      },
      "fragment": false
    },
    {
      "$type": "TerminalRule",
      "hidden": true,
      "name": "ML_COMMENT",
      "definition": {
        "$type": "RegexToken",
        "regex": "\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/"
      },
      "fragment": false
    },
    {
      "$type": "TerminalRule",
      "hidden": true,
      "name": "SL_COMMENT",
      "definition": {
        "$type": "RegexToken",
        "regex": "\\\\/\\\\/[^\\\\n\\\\r]*"
      },
      "fragment": false
    }
  ],
  "interfaces": [
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "primitiveType": "string",
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "name",
          "isOptional": false
        },
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "refType": {
                "$refText": "Type"
              },
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "typing",
          "isOptional": false
        }
      ],
      "name": "VariableTyping",
      "superTypes": []
    },
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "refType": {
                "$refText": "Expression"
              },
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "condition",
          "isOptional": false
        },
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "refType": {
                "$refText": "Expression"
              },
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "then",
          "isOptional": false
        },
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "refType": {
                "$refText": "Expression"
              },
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "else",
          "isOptional": false
        }
      ],
      "name": "ConditionalExpression",
      "superTypes": []
    },
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "refType": {
                "$refText": "Expression"
              },
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "left",
          "isOptional": false
        },
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "primitiveType": "string",
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "operator",
          "isOptional": false
        },
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "refType": {
                "$refText": "Expression"
              },
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "right",
          "isOptional": false
        }
      ],
      "name": "BinaryExpression",
      "superTypes": []
    },
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "primitiveType": "string",
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "operator",
          "isOptional": false
        },
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "refType": {
                "$refText": "Expression"
              },
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "operand",
          "isOptional": false
        }
      ],
      "name": "PrefixExpression",
      "superTypes": []
    },
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "refType": {
                "$refText": "Expression"
              },
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "base",
          "isOptional": false
        },
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "refType": {
                "$refText": "Expression"
              },
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "index",
          "isOptional": false
        }
      ],
      "name": "IndexingExpression",
      "superTypes": []
    },
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "refType": {
                "$refText": "Expression"
              },
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "previous",
          "isOptional": false
        },
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "isRef": true,
              "refType": {
                "$refText": "NamedElement"
              },
              "isArray": false
            },
            {
              "$type": "AtomType",
              "primitiveType": "string",
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "field",
          "isOptional": false
        }
      ],
      "name": "AttributeExpression",
      "superTypes": []
    },
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "isRef": true,
              "refType": {
                "$refText": "NamedElement"
              },
              "isArray": false
            }
          ],
          "name": "name",
          "isOptional": true
        },
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "refType": {
                "$refText": "Type"
              },
              "isArray": true,
              "isRef": false
            }
          ],
          "name": "typetemplates",
          "isOptional": true
        },
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "refType": {
                "$refText": "Expression"
              },
              "isArray": true,
              "isRef": false
            }
          ],
          "name": "exprtemplates",
          "isOptional": true
        },
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "refType": {
                "$refText": "Expression"
              },
              "isArray": true,
              "isRef": false
            }
          ],
          "name": "arguments",
          "isOptional": false
        }
      ],
      "name": "FunctionCallExpression",
      "superTypes": []
    },
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "isRef": true,
              "refType": {
                "$refText": "NamedElement"
              },
              "isArray": false
            }
          ],
          "name": "element",
          "isOptional": false
        }
      ],
      "name": "NamedExpression",
      "superTypes": []
    },
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "primitiveType": "string",
              "isArray": true,
              "isRef": false
            }
          ],
          "name": "fields",
          "isOptional": false
        },
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "refType": {
                "$refText": "Expression"
              },
              "isArray": true,
              "isRef": false
            }
          ],
          "name": "values",
          "isOptional": false
        }
      ],
      "name": "StructExpression",
      "superTypes": []
    },
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "refType": {
                "$refText": "Expression"
              },
              "isArray": true,
              "isRef": false
            }
          ],
          "name": "values",
          "isOptional": false
        }
      ],
      "name": "IterableExpression",
      "superTypes": []
    },
    {
      "$type": "Interface",
      "name": "ListExpression",
      "superTypes": [
        {
          "$refText": "IterableExpression"
        }
      ],
      "attributes": []
    },
    {
      "$type": "Interface",
      "name": "TupleExpression",
      "superTypes": [
        {
          "$refText": "IterableExpression"
        }
      ],
      "attributes": []
    },
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "primitiveType": "number",
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "value",
          "isOptional": false
        }
      ],
      "name": "IntLiteral",
      "superTypes": []
    },
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "primitiveType": "number",
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "value",
          "isOptional": false
        }
      ],
      "name": "RealLiteral",
      "superTypes": []
    },
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "primitiveType": "string",
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "value",
          "isOptional": false
        }
      ],
      "name": "CharLiteral",
      "superTypes": []
    },
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "primitiveType": "boolean",
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "value",
          "isOptional": false
        }
      ],
      "name": "BoolLiteral",
      "superTypes": []
    },
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "primitiveType": "string",
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "value",
          "isOptional": false
        }
      ],
      "name": "NullLiteral",
      "superTypes": []
    },
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "keywordType": {
                "$type": "Keyword",
                "value": "int"
              },
              "isArray": false,
              "isRef": false
            },
            {
              "$type": "AtomType",
              "keywordType": {
                "$type": "Keyword",
                "value": "real"
              },
              "isArray": false,
              "isRef": false
            },
            {
              "$type": "AtomType",
              "keywordType": {
                "$type": "Keyword",
                "value": "char"
              },
              "isArray": false,
              "isRef": false
            },
            {
              "$type": "AtomType",
              "keywordType": {
                "$type": "Keyword",
                "value": "bool"
              },
              "isArray": false,
              "isRef": false
            },
            {
              "$type": "AtomType",
              "keywordType": {
                "$type": "Keyword",
                "value": "null"
              },
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "name",
          "isOptional": false
        }
      ],
      "name": "PrimitiveType",
      "superTypes": []
    },
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "refType": {
                "$refText": "EnumMember"
              },
              "isArray": true,
              "isRef": false
            }
          ],
          "name": "members",
          "isOptional": false
        }
      ],
      "name": "EnumType",
      "superTypes": []
    },
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "primitiveType": "string",
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "name",
          "isOptional": false
        }
      ],
      "name": "EnumMember",
      "superTypes": []
    },
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "refType": {
                "$refText": "Field"
              },
              "isArray": true,
              "isRef": false
            }
          ],
          "name": "fields",
          "isOptional": false
        },
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "refType": {
                "$refText": "Type"
              },
              "isArray": true,
              "isRef": false
            }
          ],
          "name": "types",
          "isOptional": false
        }
      ],
      "name": "StructType",
      "superTypes": []
    },
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "primitiveType": "string",
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "name",
          "isOptional": false
        }
      ],
      "name": "Field",
      "superTypes": []
    },
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "isRef": true,
              "refType": {
                "$refText": "TypeDef"
              },
              "isArray": false
            }
          ],
          "name": "alias",
          "isOptional": false
        }
      ],
      "name": "NamedType",
      "superTypes": []
    },
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "refType": {
                "$refText": "Type"
              },
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "base",
          "isOptional": false
        },
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "refType": {
                "$refText": "Expression"
              },
              "isArray": false,
              "isRef": false
            }
          ],
          "name": "capacity",
          "isOptional": true
        }
      ],
      "name": "ListType",
      "superTypes": []
    },
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "refType": {
                "$refText": "Type"
              },
              "isArray": true,
              "isRef": false
            }
          ],
          "name": "types",
          "isOptional": false
        }
      ],
      "name": "TupleType",
      "superTypes": []
    },
    {
      "$type": "Interface",
      "attributes": [
        {
          "$type": "TypeAttribute",
          "typeAlternatives": [
            {
              "$type": "AtomType",
              "refType": {
                "$refText": "Type"
              },
              "isArray": true,
              "isRef": false
            }
          ],
          "name": "types",
          "isOptional": false
        }
      ],
      "name": "UnionType",
      "superTypes": []
    }
  ],
  "types": [
    {
      "$type": "Type",
      "typeAlternatives": [
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "ConditionalExpression"
          },
          "isArray": false,
          "isRef": false
        },
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "BinaryExpression"
          },
          "isArray": false,
          "isRef": false
        },
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "PrefixExpression"
          },
          "isArray": false,
          "isRef": false
        },
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "IndexingExpression"
          },
          "isArray": false,
          "isRef": false
        },
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "FunctionCallExpression"
          },
          "isArray": false,
          "isRef": false
        },
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "Literal"
          },
          "isArray": false,
          "isRef": false
        },
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "NamedElement"
          },
          "isArray": false,
          "isRef": false
        },
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "StructExpression"
          },
          "isArray": false,
          "isRef": false
        },
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "ListExpression"
          },
          "isArray": false,
          "isRef": false
        },
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "TupleExpression"
          },
          "isArray": false,
          "isRef": false
        }
      ],
      "name": "Expression"
    },
    {
      "$type": "Type",
      "typeAlternatives": [
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "VariableTyping"
          },
          "isArray": false,
          "isRef": false
        },
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "ConstDef"
          },
          "isArray": false,
          "isRef": false
        },
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "EnumMember"
          },
          "isArray": false,
          "isRef": false
        },
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "StructType"
          },
          "isArray": false,
          "isRef": false
        }
      ],
      "name": "NamedElement"
    },
    {
      "$type": "Type",
      "typeAlternatives": [
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "IntLiteral"
          },
          "isArray": false,
          "isRef": false
        },
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "RealLiteral"
          },
          "isArray": false,
          "isRef": false
        },
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "CharLiteral"
          },
          "isArray": false,
          "isRef": false
        },
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "BoolLiteral"
          },
          "isArray": false,
          "isRef": false
        },
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "NullLiteral"
          },
          "isArray": false,
          "isRef": false
        }
      ],
      "name": "Literal"
    },
    {
      "$type": "Type",
      "typeAlternatives": [
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "PrimitiveType"
          },
          "isArray": false,
          "isRef": false
        },
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "EnumType"
          },
          "isArray": false,
          "isRef": false
        },
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "StructType"
          },
          "isArray": false,
          "isRef": false
        },
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "NamedType"
          },
          "isArray": false,
          "isRef": false
        },
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "ListType"
          },
          "isArray": false,
          "isRef": false
        },
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "TupleType"
          },
          "isArray": false,
          "isRef": false
        },
        {
          "$type": "AtomType",
          "refType": {
            "$refText": "UnionType"
          },
          "isArray": false,
          "isRef": false
        }
      ],
      "name": "Type"
    }
  ],
  "definesHiddenTokens": false,
  "hiddenTokens": [],
  "imports": [],
  "usedGrammars": []
}`));
