/* Example 2.28 Mutual Exclusion by an Arbiter, Example 2.30 Railroad Crossing
in Principles of Model Checking
Section 2.2.3 Synchronous Message Passing */

automaton Arbiter(request: in Null, release: in Null) {
    variables { locked: bool; }
    initial { locked = false; }
    transitions {
        !locked && !request.reqRead -> request.reqRead = true;
        !locked && request.reqRead && request.reqWrite -> {
            sync request;
            locked = true;
        }
        locked && !release.reqRead -> release.reqRead = true;
        locked && release.reqRead && release.reqWrite -> {
            sync release;
            locked = false;
        }
    }
}

automaton Process(signal: out Null, wait: out Null) {
    variables { critical: bool; }
    initial { critical = false; }
    transitions {
        !critical && !wait.reqWrite -> wait.reqWrite = true;
        !critical && wait.reqRead && wait.reqWrite -> {
            wait.value = null;
            sync wait;
            critical = true;
        }
        critical && !signal.reqWrite -> signal.reqWrite = true;
        critical && signal.reqRead && signal.reqWrite -> {
            signal.value = null;
            sync signal;
            critical = false;
        }
    }
}

system ArbiterMutualExclusion() {
    components {
        p1: Process;
        p2: Process;
        a: Arbiter;
    }
    connections {
        (p1.wait, p2.wait) -> a.request;
        (p1.signal, p2.signal) -> a.release;
    }
}

typedef enum {FAR, NEAR, IN} as TState;

automaton Train(approach: out Null, exit: out Null) {
    variables {
        state: TState;
    }
    initial {
        state = FAR;
    }
    transitions {
        state == FAR && !approach.reqWrite -> approach.reqWrite = true;
        state == FAR && approach.reqRead && approach.reqWrite -> {
            sync approach;
            state = NEAR;
        }
        state == NEAR -> {
            state = IN;
        }
        state == IN && !exit.reqWrite -> exit.reqWrite = true;
        state == IN && exit.reqRead && exit.reqWrite -> {
            sync exit;
            state = FAR;
        }
    }
}

automaton Controller(approach: in Null, lower: out Null, exit: in Null, raise: out Null) {
    variables {
        state: int;
    }
    initial {
        state = 0;
    }
    transitions {
        state == 0 && !approach.reqRead -> approach.reqRead = true;
        state == 0 && approach.reqRead && approach.reqWrite -> {
            sync approach;
            state = 1;
        }
        state == 1 && !lower.reqWrite -> lower.reqWrite = true;
        state == 1 && lower.reqRead && lower.reqWrite -> {
            sync lower;
            state = 2;
        }
        state == 2 && !exit.reqRead -> exit.reqRead = true;
        state == 2 && exit.reqRead && exit.reqWrite -> {
            sync exit;
            state = 3;
        }
        state == 3 && !raise.reqWrite -> raise.reqWrite = true;
        state == 3 && raise.reqRead && raise.reqWrite -> {
            sync raise;
            state = 0;
        }
    }
}

automaton Gate(lower: in Null, raise: in Null) {
    variables {
        state: bool;
    }
    initial {
        state = true;
    }
    transitions {
        state && !lower.reqRead -> lower.reqRead = true;
        state && lower.reqRead && lower.reqWrite -> {
            sync lower;
            state = false;
        }
        !state && !raise.reqRead -> raise.reqRead = true;
        !state && raise.reqRead && raise.reqWrite -> {
            sync raise;
            state = true;
        }
    }
}

system RailroadCrossing() {
    components {
        t: Train;
        c: Controller;
        g: Gate;
    }
    connections {
        t.approach -> c.approach;
        c.lower -> g.lower;
        t.exit -> c.exit;
        c.raise -> g.raise;
    }
}